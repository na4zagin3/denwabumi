{"version":3,"sources":["logo.svg","audioContext.ts","useDTMFDecoder.tsx","useDTMFEncoder.tsx","binaryDTMFCodec.ts","DTMFEncoder.tsx","DTMFDecoder.tsx","App.js","reportWebVitals.js","index.js"],"names":["window","AudioContext","webkitAudioContext","decoder","onDecode","this","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","call","audio","stream","DTMF","require","Goertzel","volume","context","createGain","createMediaStreamSource","connect","bufferSize","recorder","createScriptProcessor","dtmf","sampleRate","repeatMin","downsampleRate","energyThreshold","filter","e","Utilities","doublePeakFilter","energies","on","value","previousBuffer","Float32Array","fill","windowBuffer","onaudioprocess","buffer","inputBuffer","getChannelData","count","Math","floor","Array","forEach","_","i","offset","set","slice","processBuffer","destination","alert","useDecoder","freqs","1","2","3","A","4","5","6","B","7","8","9","C","0","D","createOscillatorAndGain","oscillator","createOscillator","type","gainNode","mode","arr","sort","a","b","v","length","pop","parseDTMFInstruction","str","index","next","indexOf","instrStr","split","instr","opcode","payload","textEncoder","TextEncoder","DTMFEncoder","props","useState","origString","setOrigString","dtmfString","setDtmfString","dtmfDuration","setDtmfDuration","dtmfInterval","setDtmfInterval","onChangeOrigString","useCallback","event","target","onChangeDtmfString","onChangeDtmfDuration","onChangeDtmfInterval","onEncodeMessage","console","log","times","encoded","input","size","byteLength","iSize","strings","push","replace","dupe","join","encodeToDTMF","encode","announcement","map","duration","parseFloat","interval","onStart","message","options","gain","currentTime","osc1","gain1","osc2","gain2","freqList","c","undefined","startTime","frequency","setValueAtTime","start","endTime","stop","sendDTMF","onFinish","htmlFor","name","onChange","onClick","textDecoder","TextDecoder","DTMFDecoder","setDtmf","decoded","setDecoded","onDTMFDecode","onDTMFClear","binary","origInput","dedupe","result","version","m","parseInt","Uint8Array","bytes","s","fragment","decodeFromDTMF","decode","onClear","className","replaceAll","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.170bfbb6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const audioContext = window.AudioContext || (window as any).webkitAudioContext;\nexport default new audioContext();\n","import {useEffect} from 'react';\nimport context from './audioContext'\n\ntype Energies = {\n    high: number[];\n    low: number[];\n}\n\ntype FilterArg = {\n    goertzel: any;\n    energies: Energies;\n}\n\nclass Decoder {\n    onDecode: (decoded: string) => void;\n\n    constructor(onDecode: (decoded: string) => void) {\n        this.onDecode = onDecode;\n\n        const success = (stream: MediaStream) => {\n            const DTMF = require('goertzeljs/lib/dtmf');\n            const Goertzel = require('goertzeljs');\n            const volume = context.createGain();\n            const audioInput = context.createMediaStreamSource(stream);\n            audioInput.connect(volume);\n            const bufferSize = 512;\n            const windowSkip = 128;\n            // TODO Rewrite this deprecated method\n            const recorder = context.createScriptProcessor(bufferSize, 1, 1);\n            const dtmf = new DTMF({\n                sampleRate: context.sampleRate,\n                repeatMin: 6,\n                downsampleRate: 1,\n                energyThreshold: 0.005,\n                filter: function(e: FilterArg){\n                    return !Goertzel.Utilities.doublePeakFilter(e.energies['high'], e.energies['low'], 1.4);\n                }\n            });\n            dtmf.on(\"decode\", (value: string) => {\n                if (value != null){\n                    this.onDecode(value);\n                }\n            });\n            const previousBuffer = new Float32Array(bufferSize);\n            previousBuffer.fill(0);\n            const windowBuffer = new Float32Array(bufferSize);\n            recorder.onaudioprocess = function(e: AudioProcessingEvent){\n                var buffer = e.inputBuffer.getChannelData(0);\n\n                const count = Math.floor(bufferSize / windowSkip);\n                [...Array(count)].forEach((_, i) => {\n                    const offset = i * windowSkip;\n                    if (offset < bufferSize) {\n                        windowBuffer.set(previousBuffer.slice(offset));\n                    }\n                    if (offset > 0) {\n                        windowBuffer.set(previousBuffer.slice(0, offset), bufferSize - offset);\n                    }\n                    dtmf.processBuffer(windowBuffer);\n                })\n\n                previousBuffer.set(buffer);\n            };\n            volume.connect (recorder);\n            recorder.connect (context.destination) ;\n        };\n\n        const getUserMedia = navigator.getUserMedia ||\n              (navigator as any).webkitGetUserMedia ||\n              (navigator as any).mozGetUserMedia ||\n              (navigator as any).msGetUserMedia;\n\n        if (getUserMedia){\n            getUserMedia.call(navigator, {audio:true}, success, function(e) {\n                alert('Error capturing audio.');\n            });\n        } else alert('getUserMedia not supported in this browser.');\n    }\n}\n\n\nconst decoder = new Decoder(() => {});\n\nconst useDecoder = (onDecode: (decoded: string) => void) => {\n\n    decoder.onDecode = onDecode\n\n};\n\nexport default useDecoder;\n","// Based on https://gitlab.com/phonelift/telesignals/-/blob/master/src/index.js\n\nimport context from './audioContext'\n\nconst freqs = {\n  // Low\n  L_697: 697.0,\n  L_770: 770.0,\n  L_852: 852.0,\n  L_941: 941.0,\n  // High\n  H_1209: 1209.0,\n  H_1336: 1336.0,\n  H_1477: 1477.0,\n  H_1633: 1633.0\n};\n\nconst dtmf: {[s: string]: [number, number]} = {\n  1: [freqs.L_697, freqs.H_1209],\n  2: [freqs.L_697, freqs.H_1336],\n  3: [freqs.L_697, freqs.H_1477],\n  A: [freqs.L_697, freqs.H_1633],\n\n  4: [freqs.L_770, freqs.H_1209],\n  5: [freqs.L_770, freqs.H_1336],\n  6: [freqs.L_770, freqs.H_1477],\n  B: [freqs.L_770, freqs.H_1633],\n\n  7: [freqs.L_852, freqs.H_1209],\n  8: [freqs.L_852, freqs.H_1336],\n  9: [freqs.L_852, freqs.H_1477],\n  C: [freqs.L_852, freqs.H_1633],\n\n  '*': [freqs.L_941, freqs.H_1209],\n  0: [freqs.L_941, freqs.H_1336],\n  '#': [freqs.L_941, freqs.H_1477],\n  D: [freqs.L_941, freqs.H_1633]\n}\n\nfunction createOscillatorAndGain(): [OscillatorNode, GainNode] {\n    const oscillator = context.createOscillator();\n    oscillator.type = 'sine';\n\n    const gainNode = context.createGain();\n    oscillator.connect(gainNode);\n    gainNode.connect(context.destination);\n\n    return [oscillator, gainNode];\n};\n\ntype Options = {\n    duration: number,\n    interval: number,\n    gain?: number,\n    onFinish?: () => void\n};\n\nexport function sendDTMF(message: string, options: Options) {\n    const {duration, interval} = options\n    const gain = options.gain || 0.5;\n    const currentTime = context.currentTime;\n\n    const [osc1, gain1] = createOscillatorAndGain();\n    const [osc2, gain2] = createOscillatorAndGain();\n\n    const freqList = message\n        .split('')\n        .filter((c) => dtmf[c] !== undefined);\n\n    gain1.gain.value = gain;\n    gain2.gain.value = gain;\n\n    freqList\n        .forEach((c, i) => {\n            const startTime = currentTime + i * (duration + interval);\n            osc1.frequency.setValueAtTime(dtmf[c][0], startTime);\n            osc2.frequency.setValueAtTime(dtmf[c][1], startTime);\n\n            gain1.gain.setValueAtTime(0, startTime);\n            gain2.gain.setValueAtTime(0, startTime);\n            gain1.gain.setValueAtTime(gain, startTime + interval);\n            gain2.gain.setValueAtTime(gain, startTime + interval);\n        })\n\n    osc1.start();\n    osc2.start();\n\n    const endTime = currentTime + freqList.length * (duration + interval);\n    osc1.stop(endTime);\n    osc2.stop(endTime);\n}\n","type DTMFInstruction = {\n    opcode: string;\n    payload: string[];\n};\n\nconst opAnnounce = \"0\";\nconst opSize = \"888\";\nconst opEnd = \"999\";\nconst opData = \"1\";\n\nconst currentVersion = \"1\";\n\nfunction dupe(input: string) {\n    return input\n        .replace(/(.)\\1/g, \"$1A\")\n        .replace(/([*])\\1/g, \"$1$1\");\n}\n\nfunction dedupe(input: string) {\n    return input\n        .replace(/(.)\\1*/g, \"$1\")\n        .replace(/(.)A/g, \"$1$1\");\n}\n\n\nexport function generateAnnouncement(times: number) {\n    const version = currentVersion;\n\n    return [...Array(times)]\n        .map(() => `*${opAnnounce}#${version}#${version}#${version}\\n`)\n        .join('');\n}\n\nexport function encodeToDTMF(input: Uint8Array) {\n    const size = input.byteLength;\n    const iSize = `*${opSize}#${size}#${size}#${size}\\n`;\n    const strings = [iSize, iSize];\n\n    strings.push(`*${opData}#0`)\n    input.forEach((b) => {\n        strings.push(`#${b}`)\n    });\n\n    strings.push(`\\n*${opEnd}#0`)\n\n    return dupe(strings.join(''));\n}\n\nfunction mode<T>(arr: T[]){\n    return arr.sort((a,b) =>\n        arr.filter(v => v===a).length\n        - arr.filter(v => v===b).length).pop();\n}\n\nexport function decodeFromDTMF(origInput: string): Uint8Array | null {\n    const input = dedupe(origInput);\n\n    let index = 0;\n    let buffer = null;\n\n    while (index !== -1) {\n\n        const result = parseDTMFInstruction(input, index);\n        const instr = result.instr;\n        if (!instr) {\n            continue;\n        }\n\n        switch (instr.opcode) {\n            case opAnnounce:\n                const version = mode(instr.payload);\n                console.log('announce', version);\n                if (version !== currentVersion) {\n                    alert('Inconsistent version');\n                    return null;\n                }\n                break;\n            case opSize:\n                const m = mode(instr.payload);\n                if (m === undefined) {\n                    console.log('illformatted size operator', instr.payload);\n                    break;\n                }\n                const size = parseInt(m, 10);\n                console.log('size', size);\n                buffer = new Uint8Array(size);\n                break;\n            case opData:\n                const offset = parseInt(instr.payload[0], 10)\n                const bytes = instr.payload.slice(1).map((s) => parseInt(s, 10));\n                console.log('data', offset, bytes);\n                if (buffer === null) {\n                    console.log('missing header');\n                    return null;\n                }\n                if (offset > buffer.length) {\n                    console.log('invalid offset', {offset, fragment: bytes.length, buffer: buffer.length});\n                } else if (offset + bytes.length > buffer.length) {\n                    console.log('too long fragment', {offset, fragment: bytes.length, buffer: buffer.length});\n                    buffer.set(bytes.slice(0, buffer.length - offset), offset);\n                } else {\n                    buffer.set(bytes, offset);\n                }\n                break;\n            case opEnd:\n                console.log('end');\n                return buffer;\n            default:\n                console.log('unknown instruction', instr.opcode, instr.payload);\n                break;\n        }\n\n        index = result.next;\n    }\n\n    return buffer;\n}\n\nfunction parseDTMFInstruction(str: string, index: number): {next: number, instr?: DTMFInstruction} {\n    const next = str.indexOf('*', index + 1);\n\n    const instrStr =\n        next === -1 ? str.slice(index + 1) : str.slice(index + 1, next);\n\n    if (str[index] !== '*') {\n        return {\n            next,\n        };\n    }\n\n    const [opcode, ...payload] = instrStr.split('#');\n\n    return {\n        next,\n        instr: {\n            opcode: opcode,\n            payload\n        }\n    };\n}\n\nfunction showDTMFInstruction(instr: DTMFInstruction) {\n\n    const header = `*${instr.opcode}`;\n    const contents =\n        instr.payload.map((s) => `${s}`).join('#');\n\n    return header + contents;\n}\n","import React, {useState, useCallback} from 'react';\nimport {sendDTMF} from './useDTMFEncoder';\nimport {generateAnnouncement, encodeToDTMF} from './binaryDTMFCodec'\n\ntype Props = {\n    \n}\n\nconst textEncoder = new TextEncoder();\n\nfunction DTMFEncoder(props: Props) {\n    const [origString, setOrigString] = useState('');\n    const [dtmfString, setDtmfString] = useState('');\n    const [dtmfDuration, setDtmfDuration] = useState('0.04');\n    const [dtmfInterval, setDtmfInterval] = useState('0.02');\n\n    const onChangeOrigString = useCallback((event) => {\n        setOrigString(event.target.value);\n    }, [setOrigString]);\n\n    const onChangeDtmfString = useCallback((event) => {\n        setDtmfString(event.target.value);\n    }, [setDtmfString]);\n\n    const onChangeDtmfDuration = useCallback((event) => {\n        setDtmfDuration(event.target.value);\n    }, [setDtmfDuration]);\n\n    const onChangeDtmfInterval = useCallback((event) => {\n        setDtmfInterval(event.target.value);\n    }, [setDtmfInterval]);\n\n    const onEncodeMessage = useCallback(() => {\n        console.log('encode message');\n        const encoded = encodeToDTMF(textEncoder.encode(origString));\n        const announcement = generateAnnouncement(10);\n        setDtmfString(announcement + encoded);\n    }, [origString, setDtmfString]);\n\n    const duration = parseFloat(dtmfDuration);\n    const interval = parseFloat(dtmfInterval);\n    const onStart = useCallback(() => {\n        console.log(dtmfString);\n        sendDTMF(dtmfString, {\n            duration,\n            interval,\n            gain: 0.9,\n            onFinish: () => {\n                console.log('transmission completed');\n            }\n        });\n    }, [duration, interval, dtmfString]);\n\n    return <div>\n\n        <div>\n            <label htmlFor=\"origMessage\">Original Message</label>\n            <div>\n                <textarea name=\"origMessage\" value={origString} onChange={onChangeOrigString} />\n                <button onClick={onEncodeMessage}>\n                    Encode message\n                </button>\n            </div>\n        </div>\n\n        <div>\n            <label htmlFor=\"dtmfMessage\">DTMF Message</label>\n            <div>\n                <textarea name=\"dtmfMessage\" value={dtmfString} onChange={onChangeDtmfString} />\n            </div>\n        </div>\n\n        <div>\n            <label htmlFor=\"dtmfDuration\">Duration [s]</label>\n            <input type=\"text\" value={dtmfDuration} onChange={onChangeDtmfDuration} />\n\n            <label htmlFor=\"dtmfInterval\">Interval [s]</label>\n            <input type=\"text\" value={dtmfInterval} onChange={onChangeDtmfInterval} />\n            <button onClick={onStart}>\n                Send DTMF\n            </button>\n        </div>\n\n    </div>;\n}\n\nexport default DTMFEncoder;\n","import React, {useState, useCallback} from 'react';\nimport useDecoder from './useDTMFDecoder';\nimport {decodeFromDTMF} from './binaryDTMFCodec'\n\n\ntype Props = {\n    \n}\n\nconst textDecoder = new TextDecoder();\n\nfunction DTMFDecoder(props: Props) {\n    const [dtmf, setDtmf] = useState('');\n    const [decoded, setDecoded] = useState('');\n\n    const onDTMFDecode = useCallback((c) => {\n        setDtmf(`${dtmf}${c}`);\n    }, [dtmf, setDtmf]);\n    const onDTMFClear = useCallback(() => {\n        setDtmf('');\n    }, [setDtmf]);\n\n    useDecoder(onDTMFDecode);\n\n    const onDecode = useCallback((c) => {\n        const binary = decodeFromDTMF(dtmf);\n        if (binary) {\n            setDecoded(textDecoder.decode(binary));\n        } else {\n            alert('Cannot interpret');\n        }\n    }, [dtmf, setDecoded]);\n    const onClear = useCallback(() => {\n        setDecoded('');\n    }, [setDecoded]);\n\n    return (<div className=\"Decoder\">\n        DTMF Decoded:\n        <button onClick={onDTMFClear}>\n            Clear\n        </button>\n        <div className=\"Decoder-dtmf\">\n            {dtmf.replaceAll('*', '\\n*')}\n        </div>\n        Message Decoded:\n        <button onClick={onDecode}>\n            Decode\n        </button>\n        <button onClick={onClear}>\n            Clear\n        </button>\n        <div className=\"Decoder-dtmf\">\n            {decoded}\n        </div>\n    </div>);\n}\n\nexport default DTMFDecoder;\n","import React, {useState, useCallback} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport useDecoder from './useDTMFDecoder';\nimport DTMFEncoder from './DTMFEncoder';\nimport DTMFDecoder from './DTMFDecoder';\n\nfunction App() {\n    const [decoded, setDecoded] = useState('');\n\n    const onDecode = useCallback((c) => {\n        setDecoded(decoded + c);\n    }, [decoded, setDecoded]);\n\n    useDecoder(onDecode);\n\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            Data transmitter via audio (under construction)\n          </header>\n          <h2>Encoder</h2>\n          <DTMFEncoder/>\n          <h2>Decoder</h2>\n          <DTMFDecoder/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}