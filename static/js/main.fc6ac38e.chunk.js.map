{"version":3,"sources":["logo.svg","useDTMFDecoder.tsx","App.js","reportWebVitals.js","index.js"],"names":["decoder","onDecode","context","audioContext","window","AudioContext","webkitAudioContext","this","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","console","log","call","audio","stream","DTMF","require","Goertzel","volume","createGain","createMediaStreamSource","connect","recorder","createScriptProcessor","dtmf","sampleRate","repeatMin","downsampleRate","energyThreshold","filter","e","Utilities","doublePeakFilter","energies","on","value","onaudioprocess","buffer","inputBuffer","getChannelData","processBuffer","destination","alert","close","useDecoder","useEffect","App","useState","decoded","setDecoded","useCallback","c","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAAe,I,mBCwETA,EAAU,I,WAxDZ,WAAYC,GAAsC,IAAD,gCAHjDC,aAGiD,OAFjDD,cAEiD,EAC7C,IAAME,EAAeC,OAAOC,cAAiBD,OAAeE,mBAC5DC,KAAKL,QAAU,IAAIC,EACnBI,KAAKN,SAAWA,EAEhB,IA+BMO,EAAeC,UAAUD,cACxBC,UAAkBC,oBAClBD,UAAkBE,iBAClBF,UAAkBG,eAErBJ,GACAK,QAAQC,IAAI,+BACZN,EAAaO,KAAKN,UAAW,CAACO,OAAM,IAtCxB,SAACC,GACb,IAAMC,EAAOC,EAAQ,IACfC,EAAWD,EAAQ,GACnBE,EAAS,EAAKnB,QAAQoB,aACT,EAAKpB,QAAQqB,wBAAwBN,GAC7CO,QAAQH,GACnB,IAEMI,EAAW,EAAKvB,QAAQwB,sBAFX,IAE6C,EAAG,GAC7DC,EAAO,IAAIT,EAAK,CAClBU,WAAY,EAAK1B,QAAQ0B,WACzBC,UAAW,EACXC,eAAgB,EAChBC,gBAAiB,KACjBC,OAAQ,SAASC,GACb,OAAQb,EAASc,UAAUC,iBAAiBF,EAAEG,SAAF,KAAoBH,EAAEG,SAAF,IAAmB,QAG3FT,EAAKU,GAAG,UAAU,SAACC,GACF,MAATA,GACA,EAAKrC,SAASqC,MAGtBb,EAASc,eAAiB,SAASN,GAC/B,IAAIO,EAASP,EAAEQ,YAAYC,eAAe,GAC1Cf,EAAKgB,cAAcH,IAEvBnB,EAAOG,QAASC,GAChBA,EAASD,QAAS,EAAKtB,QAAQ0C,gBAUqB,SAASX,GACzDY,MAAM,8BAEPA,MAAM,+C,oDAIbhC,QAAQC,IAAI,6BACZP,KAAKL,QAAQ4C,Y,KAKL,EAAY,eAUbC,EARI,SAAC9C,GAEhB+C,qBAAU,WACNhD,EAAQC,SAAWA,IACpB,CAACA,KCpDOgD,MArBf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACJC,EADI,KACKC,EADL,KAGLnD,EAAWoD,uBAAY,SAACC,GAC1BF,EAAWD,EAAUG,KACtB,CAACH,EAASC,IAIb,OAFAL,EAAW9C,GAGP,sBAAKsD,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,6DAGA,sBAAKA,UAAU,UAAf,2BACiBJ,SCRZK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fc6ac38e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useEffect} from 'react';\n\ntype Energies = {\n    high: number[];\n    low: number[];\n}\n\ntype FilterArg = {\n    goertzel: any;\n    energies: Energies;\n}\n\nclass Decoder {\n    context: AudioContext;\n    onDecode: (decoded: string) => void;\n\n    constructor(onDecode: (decoded: string) => void) {\n        const audioContext = window.AudioContext || (window as any).webkitAudioContext;\n        this.context = new audioContext();\n        this.onDecode = onDecode;\n\n        const success = (stream: MediaStream) => {\n            const DTMF = require('goertzeljs/lib/dtmf');\n            const Goertzel = require('goertzeljs');\n            const volume = this.context.createGain();\n            const audioInput = this.context.createMediaStreamSource(stream);\n            audioInput.connect(volume);\n            const bufferSize = 512;\n            // TODO Rewrite this deprecated method\n            const recorder = this.context.createScriptProcessor(bufferSize, 1, 1);\n            const dtmf = new DTMF({\n                sampleRate: this.context.sampleRate,\n                repeatMin: 6,\n                downsampleRate: 1,\n                energyThreshold: 0.005,\n                filter: function(e: FilterArg){\n                    return !Goertzel.Utilities.doublePeakFilter(e.energies['high'], e.energies['low'], 1.4);\n                }\n            });\n            dtmf.on(\"decode\", (value: string) => {\n                if (value != null){\n                    this.onDecode(value);\n                }\n            });\n            recorder.onaudioprocess = function(e: AudioProcessingEvent){\n                var buffer = e.inputBuffer.getChannelData(0);\n                dtmf.processBuffer(buffer);\n            };\n            volume.connect (recorder);\n            recorder.connect (this.context.destination) ;\n        };\n\n        const getUserMedia = navigator.getUserMedia ||\n              (navigator as any).webkitGetUserMedia ||\n              (navigator as any).mozGetUserMedia ||\n              (navigator as any).msGetUserMedia;\n\n        if (getUserMedia){\n            console.log('setting up an audio context');\n            getUserMedia.call(navigator, {audio:true}, success, function(e) {\n                alert('Error capturing audio.');\n            });\n        } else alert('getUserMedia not supported in this browser.');\n    }\n\n    close() {\n        console.log('closing the audio context');\n        this.context.close();\n    }\n}\n\n\nconst decoder = new Decoder(() => {});\n\nconst useDecoder = (onDecode: (decoded: string) => void) => {\n\n    useEffect(() => {\n        decoder.onDecode = onDecode\n    }, [onDecode]);\n\n};\n\nexport default useDecoder;\n","import React, {useState, useCallback} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport useDecoder from './useDTMFDecoder';\n\nfunction App() {\n    const [decoded, setDecoded] = useState('');\n\n    const onDecode = useCallback((c) => {\n        setDecoded(decoded + c);\n    }, [decoded, setDecoded]);\n\n    useDecoder(onDecode);\n\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            Data transmitter via audio (under construction)\n          </header>\n          <div className=\"Decoder\">\n            DTMF Decoded: {decoded}\n          </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}