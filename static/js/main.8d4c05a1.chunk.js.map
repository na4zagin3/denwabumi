{"version":3,"sources":["logo.svg","audioContext.ts","useDTMFDecoder.tsx","useDTMFEncoder.tsx","DTMFEncoder.tsx","App.js","reportWebVitals.js","index.js"],"names":["window","AudioContext","webkitAudioContext","decoder","onDecode","this","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","call","audio","stream","DTMF","require","Goertzel","volume","context","createGain","createMediaStreamSource","connect","recorder","createScriptProcessor","dtmf","sampleRate","repeatMin","downsampleRate","energyThreshold","filter","e","Utilities","doublePeakFilter","energies","on","value","onaudioprocess","buffer","inputBuffer","getChannelData","processBuffer","destination","alert","useDecoder","useEffect","freqs","1","2","3","A","4","5","6","B","7","8","9","C","0","D","createOscillator","freq","duration","startTime","gain","oscillator","type","frequency","gainNode","time","undefined","currentTime","start","stop","sendDTMF","message","options","interval","split","forEach","c","i","osc1","onEnd","onended","createOscillators","console","log","DTMFEncoder","props","useState","dtmfString","setDtmfString","dtmfDuration","setDtmfDuration","dtmfInterval","setDtmfInterval","onChangeDtmfString","useCallback","event","target","onChangeDtmfDuration","onChangeDtmfInterval","parseFloat","onStart","onFinish","htmlFor","onChange","name","onClick","App","decoded","setDecoded","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d4c05a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const audioContext = window.AudioContext || (window as any).webkitAudioContext;\nexport default new audioContext();\n","import {useEffect} from 'react';\nimport context from './audioContext'\n\ntype Energies = {\n    high: number[];\n    low: number[];\n}\n\ntype FilterArg = {\n    goertzel: any;\n    energies: Energies;\n}\n\nclass Decoder {\n    onDecode: (decoded: string) => void;\n\n    constructor(onDecode: (decoded: string) => void) {\n        this.onDecode = onDecode;\n\n        const success = (stream: MediaStream) => {\n            const DTMF = require('goertzeljs/lib/dtmf');\n            const Goertzel = require('goertzeljs');\n            const volume = context.createGain();\n            const audioInput = context.createMediaStreamSource(stream);\n            audioInput.connect(volume);\n            const bufferSize = 512;\n            // TODO Rewrite this deprecated method\n            const recorder = context.createScriptProcessor(bufferSize, 1, 1);\n            const dtmf = new DTMF({\n                sampleRate: context.sampleRate,\n                repeatMin: 6,\n                downsampleRate: 1,\n                energyThreshold: 0.005,\n                filter: function(e: FilterArg){\n                    return !Goertzel.Utilities.doublePeakFilter(e.energies['high'], e.energies['low'], 1.4);\n                }\n            });\n            dtmf.on(\"decode\", (value: string) => {\n                if (value != null){\n                    this.onDecode(value);\n                }\n            });\n            recorder.onaudioprocess = function(e: AudioProcessingEvent){\n                var buffer = e.inputBuffer.getChannelData(0);\n                dtmf.processBuffer(buffer);\n            };\n            volume.connect (recorder);\n            recorder.connect (context.destination) ;\n        };\n\n        const getUserMedia = navigator.getUserMedia ||\n              (navigator as any).webkitGetUserMedia ||\n              (navigator as any).mozGetUserMedia ||\n              (navigator as any).msGetUserMedia;\n\n        if (getUserMedia){\n            getUserMedia.call(navigator, {audio:true}, success, function(e) {\n                alert('Error capturing audio.');\n            });\n        } else alert('getUserMedia not supported in this browser.');\n    }\n}\n\n\nconst decoder = new Decoder(() => {});\n\nconst useDecoder = (onDecode: (decoded: string) => void) => {\n\n    useEffect(() => {\n        decoder.onDecode = onDecode\n    }, [onDecode]);\n\n};\n\nexport default useDecoder;\n","// Based on https://gitlab.com/phonelift/telesignals/-/blob/master/src/index.js\n\nimport context from './audioContext'\n\nconst freqs = {\n  // Low\n  L_697: 697.0,\n  L_770: 770.0,\n  L_852: 852.0,\n  L_941: 941.0,\n  // High\n  H_1209: 1209.0,\n  H_1336: 1336.0,\n  H_1477: 1477.0,\n  H_1633: 1633.0\n};\n\nconst dtmf: {[s: string]: [number, number]} = {\n  1: [freqs.L_697, freqs.H_1209],\n  2: [freqs.L_697, freqs.H_1336],\n  3: [freqs.L_697, freqs.H_1477],\n  A: [freqs.L_697, freqs.H_1633],\n\n  4: [freqs.L_770, freqs.H_1209],\n  5: [freqs.L_770, freqs.H_1336],\n  6: [freqs.L_770, freqs.H_1477],\n  B: [freqs.L_770, freqs.H_1633],\n\n  7: [freqs.L_852, freqs.H_1209],\n  8: [freqs.L_852, freqs.H_1336],\n  9: [freqs.L_852, freqs.H_1477],\n  C: [freqs.L_852, freqs.H_1633],\n\n  '*': [freqs.L_941, freqs.H_1209],\n  0: [freqs.L_941, freqs.H_1336],\n  '#': [freqs.L_941, freqs.H_1477],\n  D: [freqs.L_941, freqs.H_1633]\n}\n\nfunction createOscillator(freq: number, duration: number, startTime?: number, gain = 0.1) {\n    const oscillator = context.createOscillator();\n    oscillator.type = 'sine';\n    oscillator.frequency.value = freq;\n\n    const gainNode = context.createGain();\n    gainNode.gain.value = gain;\n\n    oscillator.connect(gainNode);\n    gainNode.connect(context.destination);\n\n    const time = startTime === undefined ? context.currentTime : startTime;\n    oscillator.start(time);\n    oscillator.stop(time + duration);\n\n\n    return oscillator;\n};\n\nfunction createOscillators(freqs: [number, number], duration: number, options: {startTime?: number, gain?: number, onEnd?: () => void}) {\n    const osc1 = createOscillator(freqs[0], duration, options.startTime, options.gain);\n    createOscillator(freqs[1], duration, options.startTime, options.gain);\n    if (options.onEnd !== undefined) {\n        osc1.onended = options.onEnd\n    }\n}\n\ntype Options = {\n    duration: number,\n    interval: number,\n    gain?: number,\n    onFinish?: () => void\n};\n\nexport function sendDTMF(message: string, options: Options) {\n    const {duration, interval, gain} = options\n    const currentTime = context.currentTime;\n\n    message.split('').forEach((c, i) => {\n        const startTime = currentTime + i * (duration + interval);\n        createOscillators(dtmf[c], duration, {\n            startTime,\n            gain,\n            onEnd: () => {\n                console.log('end sound');\n            }});\n    })\n}\n","import React, {useState, useCallback} from 'react';\nimport {sendDTMF} from './useDTMFEncoder';\n\ntype Props = {\n    \n}\n\nfunction DTMFEncoder(props: Props) {\n    const [dtmfString, setDtmfString] = useState('');\n    const [dtmfDuration, setDtmfDuration] = useState('0.1');\n    const [dtmfInterval, setDtmfInterval] = useState('0.05');\n\n    const onChangeDtmfString = useCallback((event) => {\n        setDtmfString(event.target.value);\n    }, [setDtmfString]);\n\n    const onChangeDtmfDuration = useCallback((event) => {\n        setDtmfDuration(event.target.value);\n    }, [setDtmfDuration]);\n\n    const onChangeDtmfInterval = useCallback((event) => {\n        setDtmfInterval(event.target.value);\n    }, [setDtmfInterval]);\n\n    const duration = parseFloat(dtmfDuration);\n    const interval = parseFloat(dtmfInterval);\n    const onStart = useCallback(() => {\n        console.log(dtmfString);\n        sendDTMF(dtmfString, {\n            duration,\n            interval,\n            onFinish: () => {\n                console.log('transmission completed');\n            }\n        });\n    }, [duration, interval, dtmfString]);\n\n    return <div>\n               <label htmlFor=\"dtmfDuration\">Duration [s]</label>\n               <input type=\"text\" value={dtmfDuration} onChange={onChangeDtmfDuration} />\n\n               <label htmlFor=\"dtmfInterval\">Interval [s]</label>\n               <input type=\"text\" value={dtmfInterval} onChange={onChangeDtmfInterval} />\n\n               <label htmlFor=\"dtmfMessage\">DTMF Message</label>\n               <input name=\"dtmfMessage\" type=\"text\" value={dtmfString} onChange={onChangeDtmfString} />\n\n               <button onClick={onStart}>\n                   Send DTMF\n               </button>\n           </div>;\n}\n\nexport default DTMFEncoder;\n","import React, {useState, useCallback} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport useDecoder from './useDTMFDecoder';\nimport DTMFEncoder from './DTMFEncoder';\n\nfunction App() {\n    const [decoded, setDecoded] = useState('');\n\n    const onDecode = useCallback((c) => {\n        setDecoded(decoded + c);\n    }, [decoded, setDecoded]);\n\n    useDecoder(onDecode);\n\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            Data transmitter via audio (under construction)\n          </header>\n          <DTMFEncoder/>\n          <div className=\"Decoder\">\n            DTMF Decoded: {decoded}\n          </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}